[
  {
    "section": "General options",
    "vignettes": "Show the list of command-line options of \\irace.",
    "description": "Show this help.",
    "type": "x",
    "default": null,
    "long": "--help",
    "short": "-h",
    "name": ".help"
  },
  {
    "name": ".version",
    "type": "x",
    "short": "-v",
    "long": "--version",
    "default": null,
    "description": "Show irace package version.",
    "vignettes": "Show the version of \\irace.",
    "section": "General options"
  },
  {
    "name": ".check",
    "type": "x",
    "short": "-c",
    "long": "--check",
    "default": null,
    "description": "Check scenario.",
    "vignettes": "Check that the scenario and parameter definitions are correct and test the execution of the target algorithm. See \\autoref{sec:execution}.",
    "section": "General options"
  },
  {
    "name": ".onlytest",
    "type": "p",
    "short": "",
    "long": "--only-test",
    "default": "",
    "description": "Only test the configurations given in the file passed as argument.",
    "vignettes": "Run the configurations contained in the file provided as argument on the test instances. See \\autoref{sec:testing}.",
    "section": "Testing"
  },
  {
    "name": "scenarioFile",
    "type": "p",
    "short": "-s",
    "long": "--scenario",
    "default": ".\/scenario.txt",
    "description": "File that describes the configuration scenario setup and other irace settings.",
    "vignettes": "File that contains the scenario setup and other irace options. All options listed in this section can be included in this file. See \\IRACEHOME{\/templates\/} for an example. Relative file-system paths specified in the scenario file are relative to the scenario file itself.",
    "section": "General options",
    "man": "Path of the file that describes the configuration scenario setup and other irace settings."
  },
  {
    "name": "parameterFile",
    "type": "p",
    "short": "-p",
    "long": "--parameter-file",
    "default": ".\/parameters.txt",
    "description": "File that contains the description of the parameters of the target algorithm.",
    "vignettes": "File that contains the description of the parameters of the target algorithm. See \\autoref{sec:target parameters}.",
    "section": "Target algorithm parameters"
  },
  {
    "name": "execDir",
    "type": "p",
    "short": "",
    "long": "--exec-dir",
    "default": ".\/",
    "description": "Directory where the programs will be run.",
    "vignettes": "Directory where the target algorithm executions will be performed. The default execution directory is the current directory.\n \\begin{xwarningbox}\n The execution directory must exist before executing \\irace, it will not be created automatically.\n\\end{xwarningbox}",
    "section": "General options"
  },
  {
    "name": "logFile",
    "type": "p",
    "short": "-l",
    "long": "--log-file",
    "default": ".\/irace.Rdata",
    "description": "File to save tuning results as an R dataset, either absolute path or relative to execDir.",
    "vignettes": "  File to save tuning results as an \\aR dataset. The provided path must be either an absolute path or relative to \\parameter{execDir}. See \\autoref{sec:output r} for details on the format of the \\aR dataset.",
    "section": "General options"
  },
  {
    "name": "recoveryFile",
    "type": "p",
    "short": "",
    "long": "--recovery-file",
    "default": "",
     "description": "Previously saved log file to recover the execution of \\code{irace}, either absolute path or relative to the current directory.  If empty or \\code{NULL}, recovery is not performed.",
     "vignettes": "Previously saved \\irace log file that should be used to recover the execution of \\irace; either absolute path or relative to the current directory. If empty or \\code{NULL}, recovery is not performed. \nFor more details about recovery, see \\autoref{sec:recovery}.",
    "section": "Recovery"
  },
  {
    "name": "instances",
    "type": "s",
    "short": "",
    "long": "",
    "default": "",
    "description": "",
    "man": "Character vector of the instances to be used in the \\code{targetRunner}.",
    "section": "Training instances"
  },
  {
    "name": "initConfigurations",
    "type": "x",
    "short": "",
    "long": "",
    "default": "",
    "description": "",
    "man": "Data frame describing initial configurations (usually read from a file using \\code{readConfigurations}).",
    "section": "Initial configurations"
  },
  {
    "name": "trainInstancesDir",
    "type": "p",
    "short": "",
    "long": "--train-instances-dir",
    "default": ".\/Instances",
      "vignettes": "Directory where training instances are located; either absolute path or relative to current directory. See \\autoref{sec:training}.",
    "section": "Training instances",
    "description": "Directory where training instances are located; either absolute path or relative to current directory. If no \\code{trainInstancesFiles} is provided, all the files in \\code{trainInstancesDir} will be listed as instances."
  },
  {
    "name": "trainInstancesFile",
    "type": "p",
    "short": "",
    "long": "--train-instances-file",
    "default": "",
    "vignettes": "File that contains a list of instances and optionally additional parameters for them. See \\autoref{sec:training}.\n\\begin{xwarningbox}\nThe list of instances in \\parameter{trainInstancesFile} is interpreted as file-system paths  relative to \\parameter{trainInstancesDir}. When using an absolute path or instances that are not files, set \\code{trainInstancesDir=\"\"}.\n\\end{xwarningbox}",
    "section": "Training instances",
    "description": "File that contains a list of training instances and optionally additional parameters for them. If \\code{trainInstancesDir} is provided, \\code{irace} will search for the files in this folder."
  },
  {
    "name": "configurationsFile",
    "type": "p",
    "short": "",
    "long": "--configurations-file",
    "default": "",
    "vignettes": "File containing a table of initial configurations. If empty or \\code{NULL}, \\irace will not use initial configurations. See \\autoref{sec:initial}.\n\\begin{xwarningbox}\nThe provided configurations must not violate the constraints described in \\parameter{parameterFile} and \\parameter{forbiddenFile}.\n\\end{xwarningbox}",
    "section": "Initial configurations",
    "description": "File that contains a table of initial configurations. If empty or \\code{NULL}, all initial configurations are randomly generated."
  },
  {
    "name": "forbiddenExps",
    "type": "x",
    "short": "",
    "long": "",
    "default": "",
    "description": "",
    "man": "Vector of R logical expressions that cannot evaluate to \\code{TRUE} for any evaluated configuration.",
    "section": "Target algorithm parameters"
  },
  {
    "name": "forbiddenFile",
    "type": "p",
    "short": "",
    "long": "--forbidden-file",
    "default": "",
     "vignettes": "File containing a list of logical expressions that cannot be true for any evaluated configuration. If empty or \\code{NULL}, no forbidden configurations are considered. See \\autoref{sec:forbidden} for more information.",
    "section": "Target algorithm parameters",
    "description": "File that contains a list of logical expressions that cannot be \\code{TRUE} for any evaluated configuration. If empty or \\code{NULL}, do not use forbidden expressions."
  },
  {
    "name": "targetRunner",
    "type": "p",
    "short": "",
    "long": "--target-runner",
    "default": ".\/target-runner",
    "vignettes": "Script or \\aR function that evaluates a configuration of the target algorithm on a particular instance. See \\autoref{sec:runner} for details.",
    "section": "Target algorithm execution",
    "description": "Script called for each configuration that executes the target algorithm to be tuned. See the templates and examples provided."
  },
  {
    "name": "targetRunnerLauncher",
    "type": "p",
    "short": "",
    "long": "--target-runner-launcher",
    "default": "",
    "vignettes": "An executable that will be used to launch the target runner, when \\parameter{targetRunner} cannot be executed directly (.e.g, a Python script in Windows).",
    "section": "Target algorithm execution",
    "description": "An executable that will be used to launch the target runner, when \\code{targetRunner} cannot be executed directly (.e.g, a Python script in Windows)."
  },
  {
    "name": "targetRunnerLauncherArgs",
    "type": "s",
    "short": "",
    "long": "--target-runner-args",
    "default": "{targetRunner} {targetRunnerArgs}",
      "vignettes": "Command-line arguments provided to \\parameter{targetRunnerLauncher}. The substrings \\code{\\{targetRunner\\}} and \\code{\\{targetRunnerArgs\\}} will be replaced by the value of the option \\parameter{targetRunner} and by the arguments usually passed when calling \\parameter{targetRunner}, respectively. Example: \\code{\"-m \\{targetRunner\\} --args \\{targetRunnerArgs\\}\"}.",
    "section": "Target algorithm execution",
    "description": "Command-line arguments provided to \\code{targetRunnerLauncher}. The substrings \\code{\\{targetRunner\\}} and \\code{\\{targetRunnerArgs\\}} will be replaced by the value of the option \\code{targetRunner} and by the arguments usually passed when calling \\code{targetRunner}, respectively. Example: \\code{\"-m \\{targetRunner\\} --args \\{targetRunnerArgs\\}\"}."
  },
  {
    "name": "targetRunnerRetries",
    "type": "i",
    "short": "",
    "long": "--target-runner-retries",
    "default": 0,
   "vignettes": "Number of times to retry a call to \\parameter{targetRunner} if the call failed.",
    "section": "Target algorithm execution",
    "description": "Number of times to retry a call to \\code{targetRunner} if the call failed."
  },
  {
    "name": "targetRunnerData",
    "type": "x",
    "short": "",
    "long": "",
    "default": "",
    "vignettes": "Optional data passed to \\parameter{targetRunner}. This is ignored by the default \\parameter{targetRunner} function, but it may be used by custom \\parameter{targetRunner} functions to pass persistent data around.",
    "section": "Target algorithm execution",
    "description": "Optional data passed to \\code{targetRunner}. This is ignored by the default \\code{targetRunner} function, but it may be used by custom \\code{targetRunner} functions to pass persistent data around."
  },
  {
    "name": "targetRunnerParallel",
    "type": "x",
    "short": "",
    "long": "",
    "default": "",
    "vignettes": " Optional \\aR function to provide custom parallelization of \\parameter{targetRunner}. See \\autoref{sec:parallel} for more information.",
    "section": "Target algorithm execution",
    "description": "Optional R function to provide custom parallelization of \\code{targetRunner}."
  },
  {
    "name": "targetEvaluator",
    "type": "p",
    "short": "",
    "long": "--target-evaluator",
    "default": "",
    "description": "Optional script or R function that provides a numeric value for each configuration. See templates\/target-evaluator.tmpl",
    "vignettes": "Optional script or \\aR function that returns a numerical value for an experiment after all configurations have been executed on a given instance using \\parameter{targetRunner}. See \\autoref{sec:evaluator} for details.",
    "section": "Target algorithm execution"
   },
  {
    "name": "maxExperiments",
    "type": "i",
    "short": "",
    "long": "--max-experiments",
    "default": 0,
      "vignettes": "The maximum number of runs (invocations of \\parameter{targetRunner}) that will be performed. It determines the maximum budget of experiments for the tuning. See \\autoref{sec:budget}.",
    "section": "Tuning budget",
    "description": "Maximum number of runs (invocations of \\code{targetRunner}) that will be performed. It determines the maximum budget of experiments for the tuning."
  },
  {
    "name": "maxTime",
    "type": "i",
    "short": "",
    "long": "--max-time",
    "default": 0,
    "description": "Maximum total execution time in seconds for the executions of \\code{targetRunner}. \\code{targetRunner} must return two values: cost and time.",
    "vignettes": "The maximum total time in seconds for the runs of \\parameter{targetRunner} that will be  performed. The mean execution time  of each run is estimated in order to calculate the maximum number of experiments (see option \\parameter{budgetEstimation}).\n  When \\parameter{maxTime} is positive, then \\parameter{targetRunner} \\textbf{must} return the execution time as its second output. See \\autoref{sec:budget}.",
    "section": "Tuning budget"
  },
  {
    "name": "budgetEstimation",
    "type": "r",
    "short": "",
    "long": "--budget-estimation",
    "default": 0.02,
    "description": "Fraction (smaller than 1) of the budget used to estimate the mean computation time of a configuration. Only used when \\code{maxTime} > 0",
    "vignettes": "Fraction (smaller than 1) of the budget used to estimate the mean execution time of a configuration. Only used when \\parameter{maxTime} $> 0$. See \\autoref{sec:budget}.",
    "section": "Tuning budget"
  },
  {
    "name": "minMeasurableTime",
    "type": "r",
    "short": "",
    "long": "--min-measurable-time",
    "default": 0.01,
    "description": "Minimum time unit that is still (significantly) measureable.",
    "vignettes": "Minimum time unit that is still (significantly) measureable.",
    "section": "Tuning budget"
  },
  {
    "name": "digits",
    "type": "i",
    "short": "",
    "long": "--digits",
    "default": 4,
    "description": "Maximum number of decimal places that are significant for numerical (real) parameters.",
    "vignettes": "Maximum number of decimal places that are significant for numerical (real) parameters.",
    "section": "Target algorithm parameters"
    
  },
  {
    "name": "debugLevel",
    "type": "i",
    "short": "",
    "long": "--debug-level",
    "default": 0,
    "vignettes": "Level of information to display in the text output of \\irace. A value of 0 silences all debug messages. Higher values provide more verbose debug messages. Details about the text output of \\irace are given in \\autoref{sec:output text}.",
    "section": "General options",
    "description": "Debug level of the output of \\code{irace}. Set this to 0 to silence all debug messages. Higher values provide more verbose debug messages."
  },
  {
    "name": "nbIterations",
    "type": "i",
    "short": "",
    "long": "--iterations",
    "default": 0,
    "description": "Maximum number of iterations.",
    "vignettes": "Maximum number of iterations to be executed. Each iteration involves the generation of new configurations and the use of racing to select the best configurations. By default (with 0), \\irace calculates a \\emph{minimum} number of iterations as $\\Niter = \\lfloor 2 + \\log_{2}\\Nparam \\rfloor$, where $\\Nparam$ is the number of non-fixed parameters to be tuned. Setting this parameter may make \\irace stop sooner than it should without using all the available budget. We recommend to use the default value.",
    "section": "Internal \\irace options"
  },
  {
    "name": "nbExperimentsPerIteration",
    "type": "i",
    "short": "",
    "long": "--experiments-per-iteration",
    "default": 0,
    "description": "Number of runs of the target algorithm per iteration.",
    "vignettes": "Number of runs of the target algorithm per iteration. By default (when equal to 0), this value changes for each iteration and depends on the iteration index and the remaining budget. Further details are provided in the \\irace paper~\\citep{LopDubPerStuBir2016irace}.\nWe recommend to use the default value.",
    "section": "Internal \\irace options"
  },
  {
    "name": "sampleInstances",
    "type": "b",
    "short": "",
    "long": "--sample-instances",
    "default": 1,
    "description": "Randomly sample the training instances or use them in the order given.",
    "vignettes": "Enable\/disable the sampling of the training instances. If the option \\parameter{sampleInstances} is disabled, the instances are used in the order provided in the \\parameter{trainInstancesFile} or in the order they are read from the \\parameter{trainInstancesDir} when\\parameter{trainInstancesFile} is not provided. For more information about training instances see \\autoref{sec:training}.",
    "section": "Internal \\irace options"
  },
  {
    "name": "testType",
    "type": "s",
    "short": "",
    "long": "--test-type",
    "default": "",
    "description": "Statistical test used for elimination. The default value selects \\code{t-test} if \\code{capping} is enabled or \\code{F-test}, otherwise. Valid values are: F-test (Friedman test), t-test (pairwise t-tests with no correction), t-test-bonferroni (t-test with Bonferroni's correction for multiple comparisons), t-test-holm (t-test with Holm's correction for multiple comparisons).",
    "vignettes": "Specifies the statistical test used for elimination:\n\\begin{itemize}\n\\item[] \\code{F-test} (Friedman test)\n\\item[] \\code{t-test} (pairwise t-tests with no correction)\n\\item[] \\code{t-test-bonferroni} (t-test with Bonferroni's correction for multiple comparisons)\n\\item[] \\code{t-test-holm} (t-test with Holm's correction for multiple comparisons).\n\\end{itemize}\n We recommend to not use corrections for multiple comparisons because the test typically becomes too strict and the search stagnates. \nSee \\autoref{sec:stat test} for details about choosing the statistical test most appropriate for your scenario.\n\\begin{xwarningbox}\n The default setting of \\parameter{testType} is \\code{F-test} unless the \\parameter{capping} option is enabled in which case, the default setting is \\code{t-test}.\n\\end{xwarningbox}",
      "section": "Statistical test"
  },
  {
    "name": "firstTest",
    "type": "i",
    "short": "",
    "long": "--first-test",
    "default": 5,
    "description": "Number of instances evaluated before the first elimination test. It must be a multiple of \\code{eachTest}.",
    "vignettes": " Specifies how many instances are evaluated before the first elimination test.\n\\begin{xwarningbox}\nThe value of \\parameter{firstTest} must be a multiple of \\parameter{eachTest}.\n\\end{xwarningbox}",
    "section": "Statistical test"
  },
  {
    "name": "eachTest",
    "type": "i",
    "short": "",
    "long": "--each-test",
    "default": 1,
    "vignettes": "Specifies how many instances are evaluated between elimination tests.",
    "section": "Statistical test",
    "description": "Number of instances evaluated between elimination tests."
  },
  {
    "name": "minNbSurvival",
    "type": "i",
    "short": "",
    "long": "--min-survival",
    "default": 0,
    "description": "Minimum number of configurations needed to continue the execution of each race (iteration).",
    "vignettes": "Minimum number of configurations needed to continue the execution of each race (iteration). If the number of configurations alive in the race is not larger than this value, the current iteration will stop and a new iteration will start, even if there is budget left to continue the current race. By default (when equal to 0), the value is calculated automatically as $\\lfloor 2 + \\log_{2}\\Nparam \\rfloor$, where $\\Nparam$ is the number of non-fixed parameters to be tuned.",
    "section": "Internal \\irace options"
  },
  {
    "name": "nbConfigurations",
    "type": "i",
    "short": "",
    "long": "--num-configurations",
    "default": 0,
    "vignettes": "  The number of configurations that will be raced at each iteration. By default (when equal to 0), this value changes for each iteration and depends on \\parameter{nbExperimentsPerIteration}, the iteration index and \\parameter{mu}. The precise details are given in the \\irace paper~\\citep{LopDubPerStuBir2016irace}.\nWe recommend to use the default value.",
    "section": "Internal \\irace options",
    "description": "Number of configurations to be sampled and evaluated at each iteration."
  },
  {
    "name": "mu",
    "type": "i",
    "short": "",
    "long": "--mu",
    "default": 5,
      "vignettes": "  Parameter used to define the number of configurations to be sampled and evaluated at each iteration. The number of configurations will be calculated such that there is enough budget in each race to evaluate all configurations on at least $\\mu + \\min(5,j)$ training instances, where $j$ is the index of the current iteration. The value of $\\mu$ will be adjusted to never be lower than the value of \\parameter{firstTest}. We recommend to use the default value and, if needed, adjust \\parameter{firstTest}and \\parameter{eachTest}, instead.",
    "section": "Internal \\irace options",
    "description": "Parameter used to define the number of configurations sampled and evaluated at each iteration."
  },
  {
    "name": "confidence",
    "type": "r",
    "short": "",
    "long": "--confidence",
    "default": 0.95,
    "description": "Confidence level for the elimination test.",
    "vignettes": "Confidence level for the elimination test.",
    "section": "Statistical test"
  },
  {
    "name": "deterministic",
    "type": "b",
    "short": "",
    "long": "--deterministic",
    "default": 0,
    "description": "If the target algorithm is deterministic, configurations will be evaluated only once per instance.",
    "vignettes": "  Enable\/disable deterministic target algorithm mode. If the target algorithm is deterministic, configurations will be evaluated only once per instance. See \\autoref{sec:training} for more information.\n\\begin{xwarningbox}\n If the number of instances provided is less than the value specified for the option \\parameter{firstTest}, no statistical test will be performed.\n\\end{xwarningbox}",
    "section": "Target algorithm execution"
  },
  {
    "name": "seed",
    "type": "i",
    "short": "",
    "long": "--seed",
    "default": null,
    "vignettes": "Seed to initiallize the random number generator. The seed must be a positive integer. If the seed is \\code{\"\"} or \\code{NULL}, a random seed will be generated.",
    "section": "General options",
    "description": "Seed of the random number generator (by default, generate a random seed)."
  },
  {
    "name": "parallel",
    "type": "i",
    "short": "",
    "long": "--parallel",
    "default": 0,
    "vignettes": "Number of calls of the \\parameter{targetRunner} to execute in parallel. Values  0 or 1 mean no parallelization. For more information on parallelization, see \\autoref{sec:parallel}.",
    "section": "Target algorithm execution",
    "description": "Number of calls to \\code{targetRunner} to execute in parallel. Values \\code{0} or \\code{1} mean no parallelization."
  },
  {
    "name": "loadBalancing",
    "type": "b",
    "short": "",
    "long": "--load-balancing",
    "default": 1,
    "description": "Enable\/disable load-balancing when executing experiments in parallel. Load-balancing makes better use of computing resources, but increases communication overhead. If this overhead is large, disabling load-balancing may be faster.",
    "vignettes": "  Enable\/disable load-balancing when executing experiments in parallel. Load-balancing makes better use of computing resources, but increases communication overhead. If this overhead is large, disabling load-balancing may be faster. See \\autoref{sec:parallel}.",
    "section": "Target algorithm execution"
  },
  {
    "name": "mpi",
    "type": "b",
    "short": "",
    "long": "--mpi",
    "default": 0,
    "description": "Enable\/disable MPI. Use \\code{Rmpi} to execute \\code{targetRunner} in parallel (parameter \\code{parallel} is the number of slaves).",
    "vignettes": "  Enable\/disable use of \\pkg{Rmpi} to execute the \\parameter{targetRunner} in parallel using MPI protocol. When \\parameter{mpi} is enabled, the option \\parameter{parallel} is the number of slave nodes. See \\autoref{sec:parallel}.",
    "section": "Target algorithm execution"
  },
  {
    "name": "batchmode",
    "type": "s",
    "short": "",
    "long": "--batchmode",
    "default": 0,
        "vignettes": "  Specify how irace waits for jobs to finish when \\parameter{targetRunner} submits jobs to a batch cluster: \\code{sge}, \\code{pbs}, \\code{torque} or \\code{slurm} (\\parameter{targetRunner} must submit jobs to the cluster using. for example, \\code{qsub}). See \\autoref{sec:parallel}.",
      "section": "Target algorithm execution",
    "description": "Specify how irace waits for jobs to finish when \\code{targetRunner} submits jobs to a batch cluster: sge, pbs, torque or slurm. \\code{targetRunner} must submit jobs to the cluster using, for example, \\code{qsub}."
  },
  {
    "name": "softRestart",
    "type": "b",
    "short": "",
    "long": "--soft-restart",
    "default": 1,
    "description": "Enable\/disable the soft restart strategy that avoids premature convergence of the probabilistic model.",
    "vignettes": "  Enable\/disable the soft-restart strategy that avoids premature convergence of the probabilistic model. When a sampled configuration is \\emph{similar} to its parent configuration, the probabilistic model of these configurations is soft restarted. The soft-restart mechanism is explained in the \\irace paper~\\citep{LopDubPerStuBir2016irace}. The similarity of categorical and ordinal parameters is given by the hamming distance, and the option \\parameter{softRestartThreshold} defines the similarity of numerical parameters.",
    "section": "Internal \\irace options"
  },
  {
    "name": "softRestartThreshold",
    "type": "r",
    "short": "",
    "long": "--soft-restart-threshold",
      "default": "",
    "vignettes": "Soft restart threshold value for numerical parameters. By default, it is computed as $10^{-digits}$, where \\parameter{digits} corresponds to the \\irace option explained in this section.",
      "section": "Internal \\irace options",
      "description": "Soft restart threshold value for numerical parameters. If \\code{NA}, \\code{NULL} or \\code{\"\"}, it is computed as \\code{10^-digits}."
  },
  {
    "name": "testInstancesDir",
    "type": "p",
    "short": "",
    "long": "--test-instances-dir",
    "default": "",
    "description": "Directory where testing instances are located, either absolute or relative to current directory.",
    "vignettes": "Directory where testing instances are located, either absolute or relative to the current directory.",
    "section": "Testing"
  },
  {
    "name": "testInstancesFile",
    "type": "p",
    "short": "",
    "long": "--test-instances-file",
    "default": "",
    "description": "File containing a list of test instances and optionally additional parameters for them.",
    "vignettes": "File containing a list of test instances and, optionally, additional parameters for them.",
    "section": "Testing"
  },
  {
    "name": "testInstances",
    "type": "x",
    "short": "",
    "long": "",
    "default": "",
    "description": "",
    "section": "Testing",
    "man": "Character vector of the instances to be used in the \\code{targetRunner} when executing the testing."
  },
  {
    "name": "testNbElites",
    "type": "i",
    "short": "",
    "long": "--test-num-elites",
    "default": 1,
    "description": "Number of elite configurations returned by irace that will be tested if test instances are provided.",
    "vignettes": "  Number of elite configurations returned by irace that will be tested if test instances are provided. For more information about the testing, see \\autoref{sec:testing}.",
    "section": "Testing"   
  },
  {
    "name": "testIterationElites",
    "type": "b",
    "short": "",
    "long": "--test-iteration-elites",
    "default": 0,
    "description": "Enable\/disable testing the elite configurations found at each iteration.",
    "vignettes": "Enable\/disable testing the elite configurations found at each iteration.",
    "section": "Testing"
  },
  {
    "name": "elitist",
    "type": "b",
    "short": "-e",
    "long": "--elitist",
    "default": 1,
    "description": "Enable\/disable elitist irace.",
    "vignettes": "Enable\/disable elitist \\irace.\n\n In the \\textbf{elitist} version of \\code{irace}~\\citep{LopDubPerStuBir2016irace}, elite configurations are not discarded from the race until non-elite configurations have been executed on the same instances as the elite configurations.\n\n Each race begins by evaluating all configurations on a number of new instances. This number is defined by the option \\parameter{elitistNewInstances}. After the new instances have been evaluated, configurations are evaluated on instances seen in the previous race.  Elite configurations already have results for most of these previous instances and, therefore, do not need to be re-evaluated. Finally, after configurations have been evaluated on all these instances, the race continues by evaluating additional new instances. \n\n The statistical tests can be performed at any moment during the race according to the setting of the options \\parameter{firstTest} and \\parameter{eachTest}. The elitist rule forbids discarding elite configurations, even if the show poor performance, until the last of the previous instances is seen in the race. \n\n The \\textbf{non-elitist} version of \\irace can discard elite configurations at any point of the race, instances are not re-used from one race to the next, and new instances are sampled for each race.",
    "section": "Elitist \\irace"
  },
  {
    "name": "elitistNewInstances",
    "type": "i",
    "short": "",
    "long": "--elitist-new-instances",
    "default": 1,
    "description": "Number of instances added to the execution list before previous instances in elitist irace.",
    "vignettes": " Number of new instances added to each race before evaluating instances from previous races (only for elitist \\irace).\n \\begin{xwarningbox}\n \n If \\parameter{deterministic} is \\code{TRUE} then the number of \\parameter{elitistNewInstances} will be reduced or set to \\code{0} once all instances have been evaluated.\n\\end{xwarningbox}",
    "section": "Elitist \\irace"
  },
  {
    "name": "elitistLimit",
    "type": "i",
    "short": "",
    "long": "--elitist-limit",
    "default": 2,
    "description": "In elitist irace, maximum number per race of elimination tests that do not eliminate a configuration. Use 0 for no limit.",
    "vignettes": "  Maximum number of statistical tests performed without successful elimination after all instances from the previous race have been evaluated. If the limit is reached, the current race is stopped. Only valid for elitist \\irace. Use \\code{0} to disable the limit.",
    "section": "Elitist \\irace"
  },
  {
    "name": "repairConfiguration",
    "type": "x",
    "short": "",
    "long": "",
    "default": "",
    "description": "User-defined R function that takes a configuration generated by irace and repairs it.",
    "vignettes": "User-defined \\aR function that takes a configuration generated by \\irace and repairs it. See \\autoref{sec:repairconf} for details.",
    "section": "General options"
  },
  {
    "name": "capping",
    "type": "b",
    "short": "",
    "long": "--capping",
      "default": 0,
    "vignettes": "Enable the use of adaptive capping. This option is only available when \\parameter{elitist} is active. When using this option, \\irace provides an execution bound to each target algorithm execution (See \\autoref{sec:runner}). For more details about this option See \\autoref{sec:capping}.",
    "section": "Adaptive capping",
    "description": "Enable the use of adaptive capping, a technique designed for minimizing the computation time of configurations. This is only available when \\code{elitist} is active."
  },
  {
    "name": "cappingType",
    "type": "s",
    "short": "",
    "long": "--capping-type",
    "default": "median",
    "description": "Measure used to obtain the execution bound from the performance of the elite configurations: median, mean, worst, best.",
    "vignettes": " Specifies the measure used to define the execution bound:\n\\begin{itemize}\n\\item[] \\code{median} (the median of the performance of the elite configurations)\n\\item[] \\code{mean} (the mean of the performance of the elite configurations)\n\\item[] \\code{best} (the best performance of the elite configurations)\n\\item[] \\code{worst} (the worst performance of the elite configurations).\n\\end{itemize}",
    "section": "Adaptive capping",
    "man": "Measure used to obtain the execution bound from the performance of the elite configurations.\\itemize{\\item median: Median performance of the elite configurations.\\item mean: Mean performance of the elite configurations.\\item best: Best performance of the elite configurations.\\item worst: Worst performance of the elite configurations.}"
  },
  {
    "name": "boundType",
    "type": "s",
    "short": "",
    "long": "--bound-type",
    "default": "candidate",
    "description": "Method to calculate the mean performance of elite configurations: candidate or instance.",
    "vignettes": "Specifies how to calculate the performance of elite configurations for the execution bound:\n\\begin{itemize}\n\\item[] \\code{candidate} (performance of candidates is aggregated across the instances already executed)\n\\item[] \\code{instance} (performance of candidates on each instance).\n\\end{itemize}",
    "section": "Adaptive capping",
    "man": "Method to calculate the mean performance of elite configurations.\\itemize{\\item candidate: Mean execution times across the executed instances and the current one.\\item instance: Execution time of the current instance.}"
  },
  {
    "name": "boundMax",
    "type": "i",
    "short": "",
    "long": "--bound-max",
    "default": 0,
    "description": "Maximum execution bound for \\code{targetRunner}. It must be specified when capping is enabled.",
      "vignettes": "Maximum execution bound for \\code{targetRunner}. It must be specified when capping is enabled.",
    "section": "Adaptive capping"
  },
  {
    "name": "boundDigits",
    "type": "i",
    "short": "",
    "long": "--bound-digits",
    "default": 0,
    "description": "Precision used for calculating the execution time. It must be specified when capping is enabled.",
    "vignettes": "Precision used for calculating the execution time. It must be specified when capping is enabled.",
      "section": "Adaptive capping"
  },
  {
    "name": "boundPar",
    "type": "i",
    "short": "",
    "long": "--bound-par",
    "default": 1,
    "vignettes": "Penalty used for PARX. This value is used to penalize timed out executions, see \\autoref{sec:capping}.",
    "section": "Adaptive capping",
    "description": "Penalization constant for timed out executions (executions that reach \\code{boundMax} execution time)."
  },
  {
    "name": "boundAsTimeout",
    "type": "b",
    "short": "",
    "long": "--bound-as-timeout",
    "default": 1,
      "description": "Replace the configuration cost of bounded executions with \\code{boundMax}.",
        "vignettes": "Replace the configuration cost of bounded executions with \\parameter{boundMax}. See \\autoref{sec:capping}.",
    "section": "Adaptive capping"
  },
  {
    "name": "postselection",
    "type": "r",
    "short": "",
    "long": "--postselection",
    "default": 0,
      "description": "Percentage of the configuration budget used to perform a postselection race of the best configurations of each iteration after the execution of irace.",
        "vignettes": "Percentage of the configuration budget used to perform a postselection race of the best configurations of each iteration after the execution of \\irace. See \\autoref{sec:postselection}.",
    "section": "General options"
  },
  {
      "name": "aclib",
      "type": "b",
      "short": "",
      "long": "--aclib",
      "default": 0,
      "section": "General options",
      "description": "Enable/disable AClib mode. This option enables compatibility with GenericWrapper4AC as targetRunner script.",
      "vignettes": "Enable/disable AClib mode. This option enables compatibility with \\texttt{GenericWrapper4AC} (\\url{https://github.com/automl/GenericWrapper4AC/}) as \\parameter{targetRunner} script."
  }
]
